package net.bladehunt.rpp.processor.codegen

import net.bladehunt.rpp.model.FontDefinition
import net.bladehunt.rpp.model.FontProvider
import net.bladehunt.rpp.model.Resource
import net.bladehunt.rpp.output.BuildContext
import net.bladehunt.rpp.util.java
import net.bladehunt.rpp.util.readJsonOrNull
import java.io.File
import java.io.Writer
import java.util.*

object FontGenerator : CodeGenerator(Int.MIN_VALUE) {
    override fun generate(context: BuildContext, config: CodegenConfig, outputDir: File) {
        config.fonts.forEach { fontConfig ->
            val pkg = fontConfig.packageOverride ?: (config.basePackage + ".font")
            val outputPackage = outputDir.resolve(pkg.replace('.', '/'))

            outputPackage.mkdirs()

            val fontFile = context.outputDirectory.resolve(
                "assets/${fontConfig.font.namespace}/font/${fontConfig.font.value.removeSuffix(".json")}.json"
            )

            val className = fontConfig.className ?: (fontConfig.font.value.replaceFirstChar {
                if (it.isLowerCase()) it.titlecase(
                    Locale.getDefault()
                ) else it.toString()
            } + "Font")

            val output = outputPackage.resolve("$className.java")

            output.createNewFile()
            val writer = output.writer()
            generateFontClass(
                context,
                pkg,
                className,
                fontConfig.font,
                fontFile.readJsonOrNull<FontDefinition>() ?: return@forEach,
                fontConfig.spacePrefix,
                writer
            )
            writer.close()
        }
    }

    private fun generateFontClass(
        context: BuildContext,
        `package`: String,
        className: String,
        font: Resource,
        definition: FontDefinition,
        spacePrefix: String,
        out: Writer
    ) {
        out.write(
            java(
                """
                package $`package`;
                
                import net.kyori.adventure.key.Key;
                import net.kyori.adventure.text.Component;
                
                // Generated by https://github.com/bladehuntmc/rpp
                public class $className {
                    public static final Key FONT_KEY = Key.key("${font.namespace}", "${font.value}");
            """.trimIndent()
            )
        )

        out.write("\n")

        var withoutName = 0

        definition.providers.forEach { provider ->
            when (provider) {
                is FontProvider.Bitmap -> {
                    val name = provider.name ?: run {
                        withoutName++
                        return@forEach
                    }

                    val firstChar = provider.chars.firstOrNull() ?: return@forEach

                    out.write(java("\n    public static final Component $name = Component.text(\"$firstChar\").font(FONT_KEY);"))
                }
                is FontProvider.Space -> {
                    provider.advances.forEach { (key, advance) ->
                        out.write(java("\n    public static final Component ${spacePrefix}_${advance
                            .toString()
                            .replace('.', '_')
                            .replace("-","NEG_")
                            .removeSuffix("_0")
                        } = Component.text(\"$key\").font(FONT_KEY);"))
                    }
                }
                // TODO: Implement other providers
                else -> {}
            }
        }

        if (withoutName > 0) context.logger.warn("$withoutName provider(s) in $font does not have a name")

        out.write("\n")
        out.write("}")
    }
}